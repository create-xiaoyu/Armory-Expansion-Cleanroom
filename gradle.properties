# Gradle Properties
org.gradle.jvmargs = -Xmx8G

# Compilation Options
generate_sources_jar = true
generate_javadocs_jar = false

# Testing
enable_junit_testing = true
show_testing_output = true

# Shadow
enable_shadow = false

# Set this to true if you want to use old LWJGL2 methods.
# WARNING: Using LWJGL2 is no longer recommend, and some methods in LWJGL2 will be unavailable.
# If you are porting an old mod lazily just set this to true.
enable_lwjglx = false

# Mod Information
# HIGHLY RECOMMEND complying with SemVer for mod_version: https://semver.org/
mod_version = 3.0.0
root_package = com.xiaoyu
mod_id = armoryexpansion
mod_name = ArmoryExpansion-Cleanroom

# Mod Metadata (Optional)
mod_description = ArmoryExpansion-Cleanroom is a Cleanroom-powered reimplementation of the original Armory-Expansion mod.
mod_url =
mod_update_json =
# Delimit authors with commas
mod_authors = create_xiaoyu
mod_credits =
mod_logo_path =

# Run Configurations
# If multiple arguments/tweak classes are stated, use spaces as the delimiter
minecraft_username = Developer
extra_jvm_args =
enable_foundation_debug = false

# Maven Publishing (Provide secret: MAVEN_USER, MAVEN_PASS)
publish_to_maven = false
# Good for debugging artifacts before uploading to remote maven
# GitHub actions won't run if this is true, test this by running the task `publishToMavenLocal`
publish_to_local_maven = false
maven_name = ${mod_name}
maven_url =

# Publishing
# release_type can only be: release, beta or alpha (applies to CurseForge / Modrinth)
release_type = release
publish_with_changelog = ${{ it.file('CHANGELOG.md').exists() }}

# If any properties changes below this line, refresh gradle again to ensure everything is working correctly.

# Generate Reference Class
# There's a method in build script that generates a reference class with certain fields inside.
# Normally it will contain modid, mod name and mod version.
# You can check the template class in template/Reference.java
# You should change the ignore target in .gitignore if you changed modid or package name
generate_reference_class = true

# Access Transformers
# A way to change visibility of Minecraft's classes, methods and fields
# An example access transformer file is given in the path: `src/main/resources/example_at.cfg`
# AT files should be in the root of src/main/resources with the filename formatted as: `mod_id_at.cfg`
# Use the property `access_transformer_locations` to state custom AT files if you aren't using the default `mod_id_at.cfg` location
# If multiple locations are stated, use spaces as the delimiter
# WARNING: Use MCP name in AT file. Unimined will remap it to srg name when building.
use_access_transformer = false
access_transformer_locations = ${mod_id}_at.cfg

# Coremods
# The most powerful way to change java classes at runtime, it is however very primitive with little documentation.
# Only make a coremod if you are absolutely sure of what you are doing
# Change the property `coremod_includes_mod` to false if your coremod doesn't have a @Mod annotation
# You MUST state a class name for `coremod_plugin_class_name` if you are making a coremod, the class should implement `IFMLLoadingPlugin`
is_coremod = false
coremod_includes_mod = true
coremod_plugin_class_name =

# AssetMover
# Convenient way to allow downloading of assets from official vanilla Minecraft servers, CurseForge, or any direct links
# Documentation: https://github.com/CleanroomMC/AssetMover
use_asset_mover = false
asset_mover_version = 2.5

# Mantle Version
mantle_build = 1.3.3.49

# Tinkers Build
tinkers_build = 2.13.0.183

# Construct's Armory
# Project ID
construct_armory_project_id = 287683
# File ID
construct_armory_file_id = 3174535

# Ice and Fire: Dragons
# Project ID
iceandfire_project_id = 264231
# File ID
iceandfire_file_id = 2939529

# Matter Overdrive: Legacy Edition
# Project ID
matteroverdrive_project_id = 308192
# File ID
matteroverdrive_file_id = 2699215